1]
import java.io.*;
import java.util.*;
public class Collections {

    public static void main(String args[])
    {

      
        Collection<String> list = new LinkedList<String>();

        
        list.add("Harsha");
        list.add("Shriya");
        list.add("Yashas");

       
        System.out.println("The list is: " + list);

     
        list.add("MCA");
        list.add("SJCE");

        // printing the new list
        System.out.println("The new List is: " + list);
    }
}
-----------------------------------------------------------------------------------------------
2]
import java.util.List;
import java.util.ArrayList;

public class deleteelement {

    
    public static void main(String[] args)
    {

        
        List<Integer> al = new ArrayList<>();

        
        al.add(10);
        al.add(20);
        al.add(30);
        al.add(1);
        al.add(2);

        System.out.println("Original ArrayList : " + al);

      
        al.remove(1);
        al.remove(1);
       
        System.out.println("Modified ArrayList : " + al);
    }
}
---------------------------------------------------------------------------------------------------------
3]
import java.util.*;

class ListInterface {

    public static void main(String[] args)
    {

        List<String> li = new ArrayList<>();

        li.add("Java");
        li.add("Python");
        li.add("DSA");
        li.add("C++");

        System.out.println("Elements of List are:");

        for (String s : li) {
            System.out.println(s);
        }

        System.out.println("Element at Index 1: "+ li.get(1));

        // Updating elements
        li.set(1, "JavaScript");
        System.out.println("Updated List: " + li);

        // Removing elements
        li.remove("C++");
        System.out.println("List After Removing Element: " + li);
    }
}
-------------------------------------------------------------------------------------------------------
4]
class LinkedList {
    Node head; 

    
    class Node {
        int data;
        Node next;
        Node(int d)
        {
            data = d;
            next = null;
        }
    }

  
    void deleteNode(int key)
    {
        Node temp = head, prev = null;

        if (temp != null && temp.data == key) {
            head = temp.next;
            return;
        }

        while (temp != null && temp.data != key) {
            prev = temp;
            temp = temp.next;
        }

        if (temp == null)
            return;

        prev.next = temp.next;
    }


    public void push(int new_data)
    {
        Node new_node = new Node(new_data);
        new_node.next = head;
        head = new_node;
    }

 
    public void printList()
    {
        Node tnode = head;
        while (tnode != null) {
            System.out.print(tnode.data + " ");
            tnode = tnode.next;
        }
    }

  
    public static void main(String[] args)
    {
        LinkedList llist = new LinkedList();

        llist.push(7);
        llist.push(1);
        llist.push(3);
        llist.push(2);

        System.out.println("
Created Linked list is:");
        llist.printList();

        llist.deleteNode(1); 

        System.out.println(
            "
Linked List after Deletion of 1:");
        llist.printList();
    }
}
--------------------------------------------------------------------------------------------------------
5]
package com.mycompany.collections;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Collections;

public class ListSearch {

    // Binary search method for ArrayList
    static boolean binarySearch(int key, ArrayList<Integer> list) {
        if (list == null || list.isEmpty()) {
            return false;
        }

        int low = 0;
        int high = list.size() - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            int value = list.get(mid);

            if (value == key) {
                return true;
            } else if (value < key) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return false;
    }

    public static void main(String[] args) {
        // Using ArrayList
        ArrayList<Integer> arrayList = new ArrayList<>();
        Collections.addAll(arrayList, 1, 2, 3, 4, 6, 7, 8, 9);

        int key1 = 19;
        System.out.println("Search " + key1 + " in ArrayList: " + binarySearch(key1, arrayList)); // false

        int key2 = 2;
        System.out.println("Search " + key2 + " in ArrayList: " + binarySearch(key2, arrayList)); // true

        // Using LinkedList (converted to ArrayList for binary search)
        LinkedList<Integer> linkedList = new LinkedList<>();
        Collections.addAll(linkedList, 1, 2, 3, 4, 6, 7, 8, 9);

        ArrayList<Integer> convertedList = new ArrayList<>(linkedList);

        int key3 = 6;
        System.out.println("Search " + key3 + " in LinkedList (converted): " + binarySearch(key3, convertedList)); // true
    }
}
----------------------------------------------------------------------------------------------------------------------------
6]
package com.mycompany.collections;

import java.util.*;

public class Sort {

    public static void main(String[] args) {


        ArrayList<String> al = new ArrayList<String>();
        al.add("Harsha");
        al.add("Friends");
        al.add("Dear");
        al.add("Is");
        al.add("Superb");

        java.util.Collections.sort(al);

        System.out.println("List after the use of Collection.sort():\n" + al);
    }
}
-------------------------------------------------------------------------------------------------------------------------------------
7]
package com.mycompany.collections;

import java.util.*;

public class ReverseSort {

    public static void main(String[] args) {

        ArrayList<Integer> al = new ArrayList<Integer>();

        // Custom input integer elements
        al.add(30);
        al.add(20);
        al.add(10);
        al.add(40);
        al.add(50);

        // Sort in descending order
        java.util.Collections.sort(al, java.util.Collections.reverseOrder());

        // Print the sorted list
        System.out.println(
            "List after the use of Collections.reverseOrder() and Collections.sort():\n" + al);
    }
}

